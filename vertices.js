let wheelVertices = [

    //ön

    vec3(0.1, 0.0, 0.05),
    vec3(0.07, 0.07141428428542851, 0.05),
    vec3(0, 0, 0.05),

    vec3(0.04000000000000001, 0.09165151389911681, 0.05),
    vec3(0.010000000000000009, 0.099498743710662, 0.05),
    vec3(0, 0, 0.05),

    vec3(0, 0.1, 0.05),
    vec3(-0.03, 0.09539392014169458, 0.05),
    vec3(0, 0, 0.05),

    vec3(-0.06, 0.08000000000000002, 0.05),
    vec3(-0.09, 0.04358898943540676, 0.05),
    vec3(0, 0, 0.05),

    vec3(-0.1, -0, 0.05),
    vec3(-0.07, -0.07141428428542851, 0.05),
    vec3(0, 0, 0.05),

    vec3(-0.04000000000000001, -0.09165151389911681, 0.05),
    vec3(-0.010000000000000009, -0.099498743710662, 0.05),
    vec3(0, 0, 0.05),

    vec3(0, -0.1, 0.05),
    vec3(0.03, -0.09539392014169458, 0.05),
    vec3(0, 0, 0.05),

    vec3(0.06, -0.08000000000000002, 0.05),
    vec3(0.09, -0.04358898943540676, 0.05),
    vec3(0, 0, 0.05),

    vec3(0.1, 0, 0.05),
    vec3(0.1, 0, 0.05),
    vec3(0, 0, 0.05),

    //arka

    vec3(0.1, 0.0, -0.05),
    vec3(0.07, 0.07141428428542851, -0.05),
    vec3(0, 0, -0.05),

    vec3(0.04000000000000001, 0.09165151389911681, -0.05),
    vec3(0.010000000000000009, 0.099498743710662, -0.05),
    vec3(0, 0, -0.05),

    vec3(0, 0.1, -0.05),
    vec3(-0.03, 0.09539392014169458, -0.05),
    vec3(0, 0, -0.05),

    vec3(-0.06, 0.08000000000000002, -0.05),
    vec3(-0.09, 0.04358898943540676, -0.05),
    vec3(0, 0, -0.05),

    vec3(-0.1, -0, -0.05),
    vec3(-0.07, -0.07141428428542851, -0.05),
    vec3(0, 0, -0.05),

    vec3(-0.04000000000000001, -0.09165151389911681, -0.05),
    vec3(-0.010000000000000009, -0.099498743710662, -0.05),
    vec3(0, 0, -0.05),

    vec3(0, -0.1, -0.05),
    vec3(0.03, -0.09539392014169458, -0.05),
    vec3(0, 0, -0.05),

    vec3(0.06, -0.08000000000000002, -0.05),
    vec3(0.09, -0.04358898943540676, -0.05),
    vec3(0, 0, -0.05),

    vec3(0.1, 0, -0.05),
    vec3(0.1, 0, -0.05),
    vec3(0, 0, -0.05),

]

let wheelColors = [
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
    vec4(0.0, 0.0, 0.0, 1.0),
];

let wheeFrontLeftVColors;
let wheeFrontRightVColors;
let wheeBackLeftVColors;
let wheeBackRightVColors;

let wheeAxisFrontVColors;
let wheeAxisBackVColors;


let wheelIndices = [
    //tekerlek

    0, 1, 2,
    3, 4, 5,
    6, 7, 8,
    9, 10, 11,
    12, 13, 14,
    15, 16, 17,
    18, 19, 20,
    21, 22, 23,
    24, 25, 26,

    27, 28, 29,
    30, 31, 32,
    33, 34, 35,
    36, 37, 38,
    39, 40, 41,
    42, 43, 44,
    45, 46, 47,
    48, 49, 50,
    51, 52, 53,
    54, 55, 55,

    //arası

    0, 27, 28,
    0, 1, 28,
    1, 28, 30,
    1, 3, 30,
    3, 30, 31,
    3, 4, 31,
    4, 33, 34,
    4, 34, 6,
    6, 34, 36,
    6, 7, 36,

    7, 36, 37,
    7, 9, 37,
    9, 37, 39,
    9, 10, 39,
    10, 40, 42,
    10, 12, 42,
    12, 42, 43,
    12, 13, 43,
    13, 43, 45,
    13, 15, 45,

    15, 45, 46,
    15, 16, 46,
    16, 46, 48,
    16, 18, 48,
    18, 48, 49,
    18, 19, 49,
    19, 49, 51,
    19, 21, 51,
    21, 51, 52,
    21, 22, 52,
    22, 52, 54,
    22, 53, 54,

    24, 53, 54,
    24, 25, 53
];

let cubeVertices = [
    vec3(-0.5, -0.5, 0.5), //0
    vec3(-0.5, 0.5, 0.5),  //1
    vec3(0.5, 0.5, 0.5),   //2

    // vec4(0.5, -0.5, 0.5, 1.0),  //3
    // vec4(-0.5, -0.5, -0.5, 1.0),//4
    // vec4(-0.5, 0.5, -0.5, 1.0), //5
    // vec4(0.5, 0.5, -0.5, 1.0),  //6
    // vec4(0.5, -0.5, -0.5, 1.0),  //7

    vec3(-0.5, -0.5, 0.5), //3 -0
    vec3(0.5, 0.5, 0.5),   //4 -2
    vec3(0.5, -0.5, 0.5),  //5 -3
    //
    vec3(0.5, -0.5, -0.5),  //6 -7
    vec3(0.5, 0.5, -0.5),  //7 -6
    vec3(-0.5, 0.5, -0.5), //8 -5

    vec3(0.5, -0.5, -0.5),  //9 -7
    vec3(-0.5, 0.5, -0.5), //10 -5
    vec3(-0.5, -0.5, -0.5),//11 -4
    //
    vec3(0.5, -0.5, 0.5),  //12 -3
    vec3(0.5, 0.5, 0.5),   //13 -2
    vec3(0.5, 0.5, -0.5),  //14 -6

    vec3(0.5, -0.5, 0.5),  //15 -3
    vec3(0.5, 0.5, -0.5),  //16 -6
    vec3(0.5, -0.5, -0.5),  //17 -7
    //
    vec3(-0.5, 0.5, 0.5),  //18 -1
    vec3(-0.5, 0.5, -0.5), //19 -5
    vec3(-0.5, -0.5, -0.5),//20 -4

    vec3(-0.5, 0.5, 0.5),  //21 -1
    vec3(-0.5, -0.5, -0.5),//22 -4
    vec3(-0.5, -0.5, 0.5), //23 -0
    //
    vec3(-0.5, 0.5, 0.5),  //24 -1
    vec3(-0.5, 0.5, -0.5), //25 -5
    vec3(0.5, 0.5, -0.5),  //26 -6

    vec3(-0.5, 0.5, 0.5),  //27 -1
    vec3(0.5, 0.5, -0.5),  //28 -6
    vec3(0.5, 0.5, 0.5),   //29 -2
    //
    vec3(0.5, -0.5, 0.5),  //30 -3
    vec3(0.5, -0.5, -0.5),  //31 -7
    vec3(-0.5, -0.5, -0.5),//32 -4

    vec3(0.5, -0.5, 0.5),  //33 -3
    vec3(-0.5, -0.5, -0.5),//34 -4
    vec3(-0.5, -0.5, 0.5), //35 -0
]

let cubeVertexColors = [             //  İNŞAALLAH

    vec4(1.0, 0.0, 0.0, 1.0),  // red
    vec4(1.0, 0.0, 0.0, 1.0),  // red
    vec4(1.0, 0.0, 0.0, 1.0),  // red
    vec4(1.0, 1.0, 0.0, 1.0),  // yellow
    vec4(1.0, 1.0, 0.0, 1.0),  // yellow
    vec4(1.0, 1.0, 0.0, 1.0),  // yellow

    vec4(0.0, 1.0, 0.0, 1.0),  // green
    vec4(0.0, 1.0, 0.0, 1.0),  // green
    vec4(0.0, 1.0, 0.0, 1.0),  // green
    vec4(0.0, 1.0, 0.0, 1.0),  // green
    vec4(0.0, 1.0, 0.0, 1.0),  // green
    vec4(0.0, 1.0, 0.0, 1.0),  // green

    // vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    // vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    // vec4(0.0, 0.0, 1.0, 1.0),  // green -blue

    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    vec4(1.0, 0.0, 1.0, 1.0),  // magenta
    // vec4(1.0, 1.0, 1.0, 1.0),  // magenta -white
    // vec4(1.0, 1.0, 1.0, 1.0),  // magenta -white
    // vec4(1.0, 1.0, 1.0, 1.0),  // magenta -white

    vec4(0.0, 0.0, 0.0, 1.0),  // black
    vec4(0.0, 0.0, 0.0, 1.0),  // black
    vec4(0.0, 0.0, 0.0, 1.0),  // black
    vec4(0.0, 0.0, 0.0, 1.0),  // black
    vec4(0.0, 0.0, 0.0, 1.0),  // black
    vec4(0.0, 0.0, 0.0, 1.0),  // black
    // vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    // vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    // vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan

    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue
    vec4(0.0, 0.0, 1.0, 1.0),  // green -blue

    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan
    vec4(0.0, 1.0, 1.0, 1.0),  // black - cyan

];

let cubeBackVColors;
let cubeBottomCenterLeftVColors;
let cubeBottomCenterCenterVColors;
let cubeBottomCenterRightVColors;
let cubeFrontVColors;

let cubeAboveCenterLeftVColors;
let cubeAboveCenterCenterVColors;
let cubeAboveCenterRightVColors;

let cubeIndices = [

    //front
    0, 1, 2,
    3, 4, 5,

    //back-end
    6, 7, 8,
    9, 10, 11,

    //right
    12, 13, 14,
    15, 16, 17,

    //left
    18, 19, 20,
    21, 22, 23,

    //above
    24, 25, 26,
    27, 28, 29,

    //bottom
    30, 31, 32,
    33, 34, 35

];

let triangle3dVertices = [
    //ön üçgen  
    vec3(-0.5, -0.5, 0.5),  //0
    vec3(-0.5, 0.5, 0.5),   //1
    vec3(0.5, -0.5, 0.5),   //2

    //üçgen
    vec3(-0.5, -0.5, -0.5), //3
    vec3(-0.5, 0.5, -0.5),  //4
    vec3(0.5, -0.5, -0.5),  //5

    //sağ taraf
    vec3(-0.5, 0.5, 0.5),   //6 -1
    vec3(-0.5, 0.5, -0.5),  //7 -4
    vec3(0.5, -0.5, -0.5),  //8 -5
    vec3(-0.5, 0.5, 0.5),   //9  -1
    vec3(0.5, -0.5, -0.5),  //10 -5
    vec3(0.5, -0.5, 0.5),   //11  -2

    //sol taraf
    vec3(-0.5, 0.5, 0.5),   //12 -1
    vec3(-0.5, -0.5, -0.5), //13 -3
    vec3(-0.5, 0.5, -0.5),  //14 -4
    vec3(-0.5, 0.5, 0.5),   //15 -1
    vec3(-0.5, -0.5, -0.5), //16 -3
    vec3(-0.5, -0.5, 0.5),  //17 -0


    //alt
    vec3(-0.5, -0.5, 0.5),  //18 -0
    vec3(-0.5, -0.5, -0.5), //19 -3
    vec3(0.5, -0.5, -0.5),  //20 -5
    vec3(-0.5, -0.5, 0.5),  //21 -0
    vec3(0.5, -0.5, 0.5),   //22 -2
    vec3(0.5, -0.5, -0.5),  //23 -5
]

let triangle3dIndices = [
    0, 1, 2,  //ön üçgen İNŞAALLAH
    3, 4, 5,   //üçgen
    6, 7, 8,  //sağ üst
    9, 10, 11,  //sağ alt
    12, 13, 14,  //sol üst
    15, 16, 17,   //sol alt
    18, 19, 20,   //alt sol
    21, 22, 23    //alt sağ
]

let triangle3dColors = [
    vec4(0.0, 0.0, 0.0, 1),  // red
    vec4(0.0, 0.0, 0.0, 1),  // red
    vec4(0.0, 0.0, 0.0, 1),  // red

    vec4(0.0, 0.0, 0.0, 1),  // yellow
    vec4(0.0, 0.0, 0.0, 1),  // yellow
    vec4(0.0, 0.0, 0.0, 1),  // yellow

    vec4(0.0, 0.0, 0.0, 0.4),  // green
    vec4(0.0, 0.0, 0.0, 0.4),  // green
    vec4(0.0, 0.0, 0.0, 0.4),  // green
    vec4(0.0, 0.0, 0.0, 0.4),  // green -blue
    vec4(0.0, 0.0, 0.0, 0.4),  // green -blue
    vec4(0.0, 0.0, 0.0, 0.4),  // green -blue

    vec4(0.0, 0.0, 0.0, 0.4),  // magenta
    vec4(0.0, 0.0, 0.0, 0.4),  // magenta
    vec4(0.0, 0.0, 0.0, 0.4),  // magenta
    vec4(0.0, 0.0, 0.0, 0.4),  // magenta -white
    vec4(0.0, 0.0, 0.0, 0.4),  // magenta -white
    vec4(0.0, 0.0, 0.0, 0.4),  // magenta -white

    vec4(0.0, 0.0, 0.0, 0.4),  // black
    vec4(0.0, 0.0, 0.0, 0.4),  // black
    vec4(0.0, 0.0, 0.0, 0.4),  // black
    vec4(0.0, 0.0, 0.0, 0.4),  // black - cyan
    vec4(0.0, 0.0, 0.0, 0.4),  // black - cyan
    vec4(0.0, 0.0, 0.0, 0.4),  // black - cyan
];

let triLeftVColors;
let triRightVColors;
let triFrontVColors;